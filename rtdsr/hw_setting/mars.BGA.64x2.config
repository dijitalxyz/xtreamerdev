
# ----------- switch BUS/SCPU PLL start -----------
#
# BUS/SCPU PLL remain original MN value 
#
# ----------- switch BUS/SCPU PLL end -----------


# ----------- run SCPU & SB2 BISR start -----------
#
# we do not want to run SCPU & SB2 BISR, because some data are already on SMEM or DMEM
#
# ----------- run SCPU & SB2 BISR end   -----------


# ----------- enable Audio PLL start -----------
w 0xb800013c, 0x00000004	//PLL_PWDN=0, Turn on PLL
w 0xb800013c, 0x00000006	//PLL_RSTB=1, Release reset
n 0x800			// wait 152us
w 0xb800013c, 0x00000002	//PLL_OEB=0, Output enable
# ----------- enable Audio PLL end -----------


# ----------- enable Display SD PLL start -----------
w 0xb8000118, 0x0073720a	//M,N for 432MHz
w 0xb8000124, 0x00000004	//PLL_PWDN=0, Turn on PLL
w 0xb8000124, 0x00000006	//PLL_RSTB=1, Release reset
n 0x800			// wait 152us
w 0xb8000124, 0x00000002	//PLL_OEB=0, Output enable
# ----------- enable Display SD PLL end -----------


# ----------- enable Display HD PLL start -----------
#
# not enable Display HD PLL (already done in ROM code when PCI boot)
#
# ----------- enable Display HD PLL end -----------


# ----------- enable Display SD5 PLL start -----------
w 0xb8000128, 0x00000014	//PLL_PWDN=0, Turn on PLL
# ----------- enable Display SD5 PLL end -----------


# ----------- enable Display SD6 PLL start -----------
w 0xb800012c, 0x00000003	//PLL_RSTB=1, Release reset
w 0xb800012c, 0x00000001	//PLL_OEB=0, Output enable
# ----------- enable Display SD6 PLL end -----------


# ----------- enable ACPU PLL start -----------
//w 0xb8000108, 0x0004bbb0	//M,N for 337.5MHz
//w 0xb8000108, 0x000493b0	//M,N for 270MHz
w 0xb8000108, 0x00046bb0	//M,N for 202.5MHz
w 0xb800010c, 0x00000004	//PLL_PWDN=0, Turn on PLL
w 0xb800010c, 0x00000006	//PLL_RSTB=1, Release reset
n 0x800			// wait 152us
w 0xb800010c, 0x00000002	//PLL_OEB=0, Output enable
# ----------- enable ACPU PLL end -----------


# ----------- enable VCPU PLL start -----------
//w 0xb8000110, 0x00048b70	//M,N for 256.5MHz
//w 0xb8000110, 0x00047b70	//M,N for 229.5MHz
//w 0xb8000110, 0x00046b70	//M,N for 202.5MHz
w 0xb8000110, 0x00045370	//M,N for 162MHz
w 0xb8000114, 0x00000004	//PLL_PWDN=0, Turn on PLL
w 0xb8000114, 0x00000006	//PLL_RSTB=1, Release reset
n 0x800			// wait 152us
w 0xb8000114, 0x00000002	//PLL_OEB=0, Output enable
# ----------- enable VCPU PLL end -----------


# ----------- enable DDR PLL start -----------
w 0xb8000154,0x46b8e544  	//M,N for 202.5MHz & enable SSC phase shifter
w 0xb8000160, 0x4, 		// PLL_PWDN=0, Turn on PLL
w 0xb8000160, 0x6, 		// Enable DDR PLL power on & release RSTB
n 0x100			// wait 152us
w 0xb8000064, 0xbf7f0000	// enable DDR PLL spread spectrum
w 0xb8000160, 0x2,		// Enable DDR PLL OEB
# ----------- enable DDR PLL end -----------


# ----------- run NAND BISR start -----------
w 0xb8000604, 0x100		// set nand_bisr_hold_remap to normal mode
w 0xb8000600, 0x2001		// run nand_bisr_pwr_rstn

# ----------- enable module clock start -----------
n 0x64			// wait 100 NOP
w 0xb800000c, 0x1ffffad		// turn on clocks of DCU, NF, MD, CP, MISC
w 0xb8000010, 0x1ce		// turn on clocks of SDE, VDE, ADE, SB4, SB3, SB1
n 0x64			// wait 100 NOP
w 0xb800000c, 0x800001		// turn off clocks of DCU, MD, CP (NF and MISC are still on)
w 0xb8000010, 0x0		// turn off clocks of SDE, VDE, ADE, SB4, SB3, SB1
n 0x64			// wait 100 NOP
w 0xb8000000, 0xffffffff	// di-assert reset of NF, MD, CP, DC-PHY, DCU, MISC, SATA, ETH, USB-PHY
w 0xb8000004, 0x3df		// di-assert reset of MISC PCR, SDE, VDE, ADE, SB4, SB3, SB1
n 0x64			// wait 100 NOP
w 0xb800000c, 0x1ffffad	// turn on clocks of DCU, NF, MD, CP, MISC, ETH
w 0xb8000010, 0x1ce		// turn on clocks of SDE, VDE, ADE, SB4, SB3, SB1
# ----------- enable module clock end -----------

p 0xb800063c, 0x1, 0x1		// polling until nand_bisr_done = 1
w 0xb8000604, 0x101		// remap nand_bisr_hold_remap to functional test mode
w 0xb8000600, 0x2000		// reset nand_bisr_pwr_rstn
w 0xb8000600, 0x2001		// run nand_bisr_pwr_rstn
# ----------- run NAND BISR end   -----------


//=================================================================================================================
// DCU & PHY Setting and Initial
//=================================================================================================================
w 0xb8000158, 0x8c868888
w 0xb8000030, 0x1

w 0xb80088d0, 0x35381
w 0xb80088d4, 0x35381
w 0xb80088e0, 0x30261
w 0xb80088e4, 0x30261
w 0xb8008904, 0x30261
w 0xb800891c, 0x30261
w 0xb8008920, 0x30261
w 0xb8008930, 0x35381
w 0xb8008934, 0x35381
w 0xb8008978, 0x35381
w 0xb800897c, 0x35381
w 0xb8008980, 0x35381
w 0xb8008984, 0x35381


//DC_SYS_MISC-------------------------------------------------------------------
w 0xb8008004,0xb2020

//DC_TMCTRL1--------------------------------------------------------------------
w 0xb8008800, 0x60899a44

//DC_TMCTRL2--------------------------------------------------------------------
//w 0xb8008804, 0x00c00700
//w 0xb8008804, 0x00404700

//DC_MREG-----------------------------------------------------------------------
w 0xb8008808, 0x00040a52

//DC_CAL_ADDR-------------------------------------------------------------------
//w 0xb8008810, 0xfffffffe

//DC_MISC-----------------------------------------------------------------------
w 0xb8008818, 0x00000900

//DC_DLL_CTRL------------------------------------------------------------------- 
w 0xb800881c, 0xb0000b00

//DC_FW_DLY--------------------------------------------------------------------- 
//w 0xb8008820, 0x0c0c0c0c

//DC_TMCTRL1_extend-------------------------------------------------------------
w 0xb8008828, 0x006a9708

//DLC_POS_DQS-------------------------------------------------------------------
w 0xb800882c, 0x030333cf

//RX_MARGIN_SEL-----------------------------------------------------------------
w 0xb80089c0, 0x55555555

//TEST_MODE_SEL-----------------------------------------------------------------
w 0xb80089cc, 0x8

//DC_FCTRL----------------------------------------------------------------------
w 0xb800880c, 0x10



//=================================================================================================================
// SYSBRG2 Setting
//=================================================================================================================
w 0xb801a010, 0x1f		//SB2 timeout counter
w 0xb801a004, 0x00000031	//SB2 timeout enable


//=================================================================================================================
// PCI Setting
//=================================================================================================================
w 0xb80003ac, 0x00400000	//for pci driving 8mA
w 0xb8000338, 0x1		//select PCI host mode


//-------- init UART_1 ----------
w 0xb801b22c,0x90	
w 0xb801b220,0xe	
w 0xb801b224,0x0	
w 0xb801b22c,0x03	
w 0xb801b228,0xc7	
w 0xb801b224,0x01	


//=================================================================================================================
// bootcode size
// (these are "MANDATORY" for flash_image_maker to set bootcode size)
//=================================================================================================================
w 0xb1000ff0, 0x0			// cannot use magic number for identify bootcode size
w 0xb1000fec, 0x0			// flash_image_maker will set bootcode size here

//-------- DCU calibration parameter --------
w 0xb1000ff4, 0xdcca0000		/* start position = 0 */
w 0xb1000ff8, 0xdcca001f		/* end position = 31 */

//-------- how to copy bootcode from NOR flash to DDR --------
/* bit 31 = 1 means CPU byte-to-byte copy, 0 means use MD */
/* bit 0  = 1 means boot from recovery mode, 0 means normal boot */
w 0xb1000ffc, 0x80000001

//-------- for ETN LED in Mars chip ver. B --------
w 0xb8000348, 0x120

//-------- switch pin mux from GPIO to UART0 --------
/* defined in 1283_c0000_XXX.inc */

// ------- print welcome message to UART0 --------
w 0xb801b200, 0x68
w 0xb801b200, 0x65
w 0xb801b200, 0x6c
w 0xb801b200, 0x6c
w 0xb801b200, 0x6f
w 0xb801b200, 0x20
w 0xb801b200, 0x20
w 0xb801b200, 0x77
w 0xb801b200, 0x6f
w 0xb801b200, 0x72
w 0xb801b200, 0x6c
w 0xb801b200, 0x64
w 0xb801b200, 0x21
w 0xb801b200, 0xd
w 0xb801b200, 0xa
